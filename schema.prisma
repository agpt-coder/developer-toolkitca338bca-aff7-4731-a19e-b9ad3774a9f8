// datasource db defines the database connection settings.
// It is configured for PostgreSQL and uses an environment variable for the connection URL.
// The 'extensions' feature enables the use of PostgreSQL-specific data types.
datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
}

// generator db configures Prisma Client settings.
// It is set up to use Prisma Client Python with asyncio interface and specific features.
generator db {
  provider             = "prisma-client-py"
  interface            = "asyncio"
  recursive_type_depth = 5
  previewFeatures      = ["postgresqlExtensions"]
}

model User {
  id           String        @id @default(dbgenerated("gen_random_uuid()"))
  email        String        @unique
  hash         String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  role         Role          @default(GENERAL)
  Subscription Subscription?
  APITokens    APIToken[]
  ActivityLogs ActivityLog[]
  APIRequests  APIRequest[]
}

model Subscription {
  id        String           @id @default(dbgenerated("gen_random_uuid()"))
  userId    String           @unique
  User      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  plan      SubscriptionPlan
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
}

model APIToken {
  id        String    @id @default(dbgenerated("gen_random_uuid()"))
  token     String    @unique
  userId    String
  User      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime  @default(now())
  expiresAt DateTime?
}

model ActivityLog {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  userId    String
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  action    String
  details   String?
  createdAt DateTime @default(now())
}

model APIRequest {
  id             String   @id @default(dbgenerated("gen_random_uuid()"))
  userId         String?
  User           User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  endpoint       String
  createdAt      DateTime @default(now())
  responseTimeMs Int // Response time in milliseconds
  success        Boolean
  Module         Module?  @relation(fields: [moduleId], references: [id])
  moduleId       String?
}

model Module {
  id          String       @id @default(dbgenerated("gen_random_uuid()"))
  name        ModuleName
  description String?
  APILogs     APIRequest[]
}

enum Role {
  GENERAL
  SUBSCRIBED
  ADMIN
}

enum SubscriptionPlan {
  BASIC
  PREMIUM
}

enum ModuleName {
  USERMANAGEMENT
  INTEGRATIONSERVICES
  DATAPROCESSING
  APIGATEWAY
  MONITORINGANDLOGGING
  VERSIONCONTROL
  UTILITYSERVICES
  CONFIGURATIONMANAGEMENT
  DISASTERRECOVERY
  COMPLIANCEANDSECURITY
}

